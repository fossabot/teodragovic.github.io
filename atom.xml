<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Peta Kolona]]></title>
  <link href="http://petakolona.com//atom.xml" rel="self"/>
  <link href="http://petakolona.com//"/>
  <updated>2014-02-10T16:05:07+01:00</updated>
  <id>http://petakolona.com//</id>
  <author>
    <name><![CDATA[Teo Dragović]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[[NOTES] Smashing Book #4 - pt. 2]]></title>
    <link href="http://petakolona.com//blog/smashing-book-4-pt2/"/>
    <updated>2014-02-10T00:00:00+01:00</updated>
    <id>http://petakolona.com//blog/smashing-book-4-pt2</id>
    <content type="html"><![CDATA[<p>More notes from <a href="http://www.smashingmagazine.com/smashing-book-4-new-perspectives/">Smashing Book #4</a>. Going forward with chapters 3 and 4. Some really great insights and ideas for keeping sites lean and fast.</p>

<!-- more -->

<h2>[Chapter 3] The Vanilla Web Diet by Christian Heilmann</h2>

<h3>Build on what works</h3>

<p>Avoid unnecessary boilerplates and frameworks and start with a clean slate. HTML5 is a boilerplate itself. Use HTML build-in features and expand upon them only when needed.</p>

<p>Base layer should be plain HTML with links and semantic markup that works without and CSS or JS.</p>

<h3>Lack of support is an opportunity</h3>

<blockquote>
<p>If an old browser cannot do something, we have the chance to test for it and not
provide that functionality. In most cases, the functionality is merely nice to have
and isn’t needed.</p>

<p>Start with basic code that works in all browsers, then add to it and make sure that browsers that should not be in use at all do not get code they might choke on — you’ll leave everybody happy.</p>
</blockquote>

<h3>Browser-specific code cannot be trusted</h3>

<p>Any code that needs vendor prefixes should have universal fallback.</p>

<p><em>Personal note:</em> Use autoprefixer and write only official syntax.</p>

<h3>Use a mix of technologies, each for what it does best</h3>

<p>Don&#39;t force everything in JavaScript if it can be done in CSS and vice-versa. Use HTML for content, JS for triggering interactions and CSS for styling and animations.</p>

<h3>Ask questions</h3>

<p>Before adding new functionality, ask environment <em>if</em> it can be processed and provide appropriate fallbacks.</p>

<blockquote>
<p>The less code we force our browsers to parse, the better their performance will be.</p>
</blockquote>

<h3>Write as much as needed, not the least possible</h3>

<p>Don&#39;t let quick fixes add up. Think about maintainability of code before and while writing it.</p>

<h3>Basic functionality should always be there.</h3>

<blockquote>
<p>What does basic functionality entail? Put simply, it allows the user to do what they came for regardless of any technology failure.</p>
</blockquote>

<p>Links should always work, forms should be sent to server-side control and embedded media should have fallback links to raw files.</p>

<h3>Usefulness beats consistency across browsers</h3>

<p>Don&#39;t force one design that works everywhere. Make sure different expiriences result in the same outcome (making website or app usable). </p>

<h3>Load only what is needed</h3>

<p>Don&#39;t give browsers assets they can&#39;t use. Use JavaScript for support testing and loading resources on demand.</p>

<p>Delay loading unnecessary content and force storing it on user devices as much as possible.</p>

<p><em>TIP:</em> Trigger load when user activates focus on forms input meaning there is no other interaction with app. Also, load images only when they enter viewport.</p>

<h3>Analyzing effects beats adding FX</h3>

<blockquote>
<p>If you want to add shiny things, make sure they can perform in a shiny fashion.</p>
</blockquote>

<p>Effects added in native apps will not necessary be appropriate or perform as well in web apps.</p>

<h3>Strong foundations beat a possible future addition</h3>

<p>Don&#39;t add excessive code or frameworks for future that may never come. Use only what you need to achieve current goals. </p>

<blockquote>
<p>Many of the apps and websites we produce are there, first and foremost, to get people to put content into them and make that content available to others. The code of the app itself should play a secondary role to that.</p>
</blockquote>

<hr>

<h2>[Chapter 4] Culture of Performance by Tim Kadlec</h2>

<p>Plan for performance and keep it in mind early on and during development process, not just after launch.</p>

<p>Decrease of page load time directly impacts revenue, conversions and page traffic.</p>

<p>57% of users will abandon a site after waiting three seconds for the page to load.</p>

<p>To make performance clients/menagement priority tie it to the metrics they care about and make visual representations (show site loading in comparison to competitor site).</p>

<p>Keep performance in discussion. By leaving it as an afterthought you are underplaying its importance.</p>

<p>Set up <strong>performance budget</strong> - page load time, total weight and number of requests.</p>

<p>Response targets by Jakob Neilsen:</p>

<blockquote>
<ul>
<li>0.1s - The limit for users to feel that the system reacts instantaneously.</li>
<li>1.0s - The limit for uninterrupted flow of thought. The users notice the delay, but they still feel direct interaction.</li>
<li>10s - The limit for keeping user attention. Anything longer than this and the users will either give up or go off to do something else while they wait.</li>
</ul>
</blockquote>

<p>At all times measure current performance of your site and your competitors site as well.</p>

<p><strong>20% rule</strong> - to create a noticeable improvement in performance as perceived by your visitors, you need to improve performance by at least 20%.</p>

<p>How to add new feature while having performance budget:</p>

<ul>
<li>optimize existing features to stay inside budget</li>
<li>remove existing features to make room in the budget for new feature</li>
<li>don&#39;t add new feature if it&#39;s not important enough to push other fetures out</li>
</ul>

<blockquote>
<p>Keep enforcing the budget after launch as a way of avoiding the slow creep of
bloat that tends to manifest itself.</p>
</blockquote>

<p>When setting performance budget be strict and explicit but realistic. Don&#39;t set metrics to hight or too low. </p>

<p>Categorize the assets on the page (ie. content, enhancements and leftovers).</p>

<blockquote>
<p>A performance budget is meant to help you decide how to display your content, not what content to display. Removing important content from a page is not a performance strategy.</p>
</blockquote>

<p>Use apps to simulate slow connections</p>

<ul>
<li><a href="http://www.charlesproxy.com/">http://www.charlesproxy.com/</a></li>
<li><a href="http://slowyapp.com/">http://slowyapp.com/</a></li>
</ul>

<p>It&#39;s hard to see potential performance pitfalls from Photoshop - get to the browser early.</p>

<p><em>TIP:</em> Following snippet outputs perceived load time to the console (can be also used on elements)</p>
<div class="highlight"><pre><code class="javascript"><span class="kd">function</span> <span class="nx">getLoadTime</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">var</span> <span class="nx">now</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">().</span><span class="nx">getTime</span><span class="p">();</span>
    <span class="c1">// Get the performance object</span>
    <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nx">performance</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">mozPerformance</span> 
    <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">msPerformance</span> <span class="o">||</span> <span class="nb">window</span><span class="p">.</span><span class="nx">webkitPerformance</span> <span class="o">||</span> <span class="p">{};</span>
    <span class="kd">var</span> <span class="nx">timing</span> <span class="o">=</span> <span class="nx">performance</span><span class="p">.</span><span class="nx">timing</span> <span class="o">||</span> <span class="p">{};</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">timing</span><span class="p">)</span> <span class="p">{</span>
        <span class="kd">var</span> <span class="nx">load_time</span> <span class="o">=</span> <span class="nx">now</span> <span class="o">-</span> <span class="nx">timing</span><span class="p">.</span><span class="nx">navigationStart</span><span class="p">;</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">&#39;Load time: &#39;</span> <span class="o">+</span> <span class="nx">load_time</span> <span class="o">+</span> <span class="s1">&#39;ms&#39;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="nb">window</span><span class="p">.</span><span class="nx">onload</span> <span class="o">=</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
    <span class="nx">getLoadTime</span><span class="p">();</span>
<span class="p">}</span>
</code></pre></div>
<p>Everything that gets added to the page must be justifed. Keep base template as lean as possible. Use tested and proved solutions but only when needed - don&#39;t include them by default.</p>

<blockquote>
<p>For any item included on your page, do whatever you can to minimize its impact on page weight and load time.</p>
</blockquote>

<p>Image optimization tools:</p>

<ul>
<li><a href="http://pngmini.com/">http://pngmini.com/</a></li>
<li><a href="http://imageoptim.com/">http://imageoptim.com/</a></li>
<li><a href="http://jamiemason.github.io/ImageOptim-CLI/">http://jamiemason.github.io/ImageOptim-CLI/</a></li>
</ul>

<p><a href="https://speakerdeck.com/mikeyk/secrets-to-lightning-fast-mobile-design">Secrets to Lightning Fast Mobile Design</a></p>

<p>Design site so it <em>feels</em> fast to the users. Users can perceive site as fast if it takes them less time to complete tasks.</p>

<h3>Links</h3>

<ul>
<li><a href="http://bradfrostweb.com/blog/post/performance-as-design/">http://bradfrostweb.com/blog/post/performance-as-design/</a></li>
<li><a href="http://www.keynote.com/keynote_competitive_research/index.html">http://www.keynote.com/keynote_competitive_research/index.html</a></li>
<li><a href="http://www.codinghorror.com/blog/2011/06/performance-is-a-feature.html">http://www.codinghorror.com/blog/2011/06/performance-is-a-feature.html</a></li>
<li><a href="http://www.uie.com/articles/download_time/">http://www.uie.com/articles/download_time/</a></li>
<li><a href="https://alexsexton.com/blog/2013/03/deploying-javascript-applications/">https://alexsexton.com/blog/2013/03/deploying-javascript-applications/</a></li>
<li><a href="http://filamentgroup.com/lab/socialcount/">http://filamentgroup.com/lab/socialcount/</a></li>
<li><a href="http://bradfrostweb.com/blog/post/atomic-web-design/">http://bradfrostweb.com/blog/post/atomic-web-design/</a></li>
</ul>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[[NOTES] Smashing Book #4 - pt. 1]]></title>
    <link href="http://petakolona.com//blog/smashing-book-4-pt-1/"/>
    <updated>2014-02-09T00:00:00+01:00</updated>
    <id>http://petakolona.com//blog/smashing-book-4-pt-1</id>
    <content type="html"><![CDATA[<p>I have this memento superpower to easily and quickly forget almost everything I read or watch after short period of time. That is why I decided to take notes on information I gather from various articles, tutorials, conference talks and books. Most recently, I started reading wonderful <a href="https://shop.smashingmagazine.com/smashing-book-4-ebooks.html">Smashing Book #4</a>. These are my take-away points from first two chapters of the book.</p>

<!-- more -->

<h2>[Chapter 1] Modern CSS Architecture and Front-End Development by Harry Roberts</h2>

<p>There are three stakeholders in every project: the client, the user and the developer. Client and users don&#39;t care about code, they just want fast and reliable site. </p>

<blockquote>
<p>In reality, developers are the only people who really care about code. Write it for yourself, but write it to be fast (for the users) and robust (for
the client).</p>
</blockquote>

<p>Elements should be semantic and make sense to machines that interpret them, classes should be sensible and make sense to humans who read them. </p>

<h4>OOCSS and Code Structure</h4>

<p>Abstract and reuse repeating design patterns using object-orientated paradigms (single responsibility principle).</p>

<p>Plan and organize CSS architecture before starting to code. Arrange code in parts so that every new set inherits from previous ones and order rules from most to last generic.</p>

<h4>Selectors</h4>

<blockquote>
<p>The bite-sized guideline for decent CSS selectors is basically: keep them well-named, as short as possible, and keep specificity low at all costs.</p>
</blockquote>

<p>Don&#39;t use ID&#39;s - they are too specific and can&#39;t be reused. Also, avoid compound selectors or at least, keep them short as possible.</p>

<p>Tying selectors to location reduces their scope for reuse. Keep selectors portable and robust. </p>

<h4>Naming and Verbosity</h4>

<blockquote>
<p>Class names should communicate useful information to developers - Nicolas Gallagher</p>
</blockquote>

<p>Use abstract names for high-level abstractions and design patterns and specific names for specific components. DON&#39;T combine them.</p>

<p>Insisting on clean markup often results in messy CSS. Use as much classes as needed. HTML is easier to update than CSS is to refactor.</p>

<blockquote>
<p>If something has to do N things, it should have N hooks applied to it.</p>
</blockquote>

<p>Separate CSS classes from JS handlers (ie. .btn for style, .js-btn for event binding)</p>

<h3>Links</h3>

<ul>
<li><a href="http://www.stubbornella.org/content/2011/04/28/our-best-practices-are-killing-us/">http://www.stubbornella.org/content/2011/04/28/our-best-practices-are-killing-us/</a></li>
<li><a href="https://github.com/stubbornella/oocss/wiki">https://github.com/stubbornella/oocss/wiki</a></li>
<li><a href="http://meiert.com/en/blog/20080812/best-practice-ids-and-classes/">http://meiert.com/en/blog/20080812/best-practice-ids-and-classes/</a></li>
<li><a href="http://www.youtube.com/watch?v=XQWOKBBJ114&amp;hd=1">http://www.youtube.com/watch?v=XQWOKBBJ114&amp;hd=1</a></li>
<li><a href="http://smacss.com/">http://smacss.com/</a></li>
<li><a href="http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/">http://www.stubbornella.org/content/2010/06/25/the-media-object-saves-hundreds-of-lines-of-code/</a></li>
<li><a href="http://nicolasgallagher.com/about-html-semantics-front-end-architecture/">http://nicolasgallagher.com/about-html-semantics-front-end-architecture/</a></li>
<li><a href="http://bem.info/method/">http://bem.info/method/</a></li>
</ul>

<hr>

<h2>[Chapter 2] Writing Maintainable, Future-Friendly Code by Nicholas Zakas</h2>

<h4>Code Conventions</h4>

<p>Define and use single coding style for project. It makes communication easier and errors more obvious.</p>

<p>Leave comments in code to explain what it does, why is doing it in that way and reference any bugs it&#39;s related to.</p>

<h4>Architecture</h4>

<p>Architecture keeps code organized, scalable and encourages good design.</p>

<p>Before starting to code, research and choose <strong>appropriate</strong> CSS and JS architecture. Also, document reasoning for choosing particular architecture.</p>

<p>Any kind of architecture is better than having no architecture.</p>

<h4>Documentation</h4>

<blockquote>
<p>Good software is well-documented software, and bad software has little documentation. There is no such thing as maintainable code that isn’t also documented.</p>
</blockquote>

<p>Common approaches to writing documentation:</p>

<ul>
<li>Getting started guide</li>
<li>Tutorials for common use cases</li>
<li>API documentation</li>
</ul>

<p>API documentation is the minimum that a project should have for documentation.</p>

<p><strong>Design document</strong></p>

<blockquote>
<p>Design documents describe the architecture and options available within
some piece of software. It is frequently written before coding begins and
updated once coding is complete. Design documents answer the question,
“How does this work?”</p>
</blockquote>

<p>Make documentation part of feature deliverable to ensure it gets written.</p>

<h4>Third-Party Components</h4>

<p>When choosing third-party components keep note:</p>

<ul>
<li>When was last time updated</li>
<li>Who is developer</li>
<li>Is developer responsive</li>
<li>How stable is API</li>
<li>Who else is using it</li>
</ul>

<p>Keep third-party code separate. Don&#39;t make edits or fork it, instead try to write plugin or extension.</p>

<h4>Legacy code</h4>

<p>Leave yourself comments when working with legacy code.</p>

<p>Favor refactoring over rewriting and add unit tests.</p>

<blockquote>
<p>Add documentation. Add tests. Don’t believe in magic.</p>
</blockquote>

<h3>Links</h3>

<ul>
<li><a href="http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml">http://google-styleguide.googlecode.com/svn/trunk/javascriptguide.xml</a></li>
<li><a href="http://contribute.jquery.org/style-guide/js/">http://contribute.jquery.org/style-guide/js/</a></li>
<li><a href="http://www.slideshare.net/nzakas/scalable-javascript-application-architecture">http://www.slideshare.net/nzakas/scalable-javascript-application-architecture</a></li>
<li><a href="http://coding.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/">http://coding.smashingmagazine.com/2011/12/12/an-introduction-to-object-oriented-css-oocss/</a></li>
<li><a href="http://www.chromium.org/developers/design-documents">http://www.chromium.org/developers/design-documents</a></li>
<li><a href="http://warpspire.com/kss/styleguides/">http://warpspire.com/kss/styleguides/</a></li>
</ul>
]]></content>
  </entry>
  
</feed>
